Задачи

Получение, отслеживание состояния и хранение заказа. 
- получить заказ
- внести изменение в состояние
- вернуть текущее состояние
- вернутрь список заказов за период (отчет)

Порядок работы
1) админ  добавляет разрешенные api_key, и роль (customer/manager) , команда 'new_api_key'
2) используя api_key заказчик  (customer) создает заказ , команда 'new_order'
3) по запросу отдаем информацию о заказе  (customer/manager), передаем критерии поиска, команда 'order_info'
4) по запросу меняем информацию о заказе  (manager), команда 'order_status_edit'
5) по запросу устанавливаем в date_complete текущую дату/время - завершение заказа,  команда 'order_end'
6) по запросу отдаем массив заказов за период  (customer/manager), передаем критерии поиска, команда 'order_list'
7) уведомление о новом заказе, после успешного создания нового заказа (получен новый id) на внешний сервер отправляется уведомление с номером заказа


Таблицы 

api_keys - список разрешенных ключей
	name - первычный ключ (название магазина)
	api_key
	role - (customer/manager)

orders  - список заказов
	id - номер заказа в этой таблице, первычный ключ
	name  -  заказчик, из таблицы api_keys 
	order_number - номер заказа в системе заказчика (произврльный текст)
	inn - ИНН компании (клиент)
	address - текст
	email - текст
	phone - текст
	device - устройство (номер изделия, номер программы, аккаунт облака) - текст
	order - JSON строка массива позиций заказа 
		order:[{code:'', piece:'', price:''},{},{}]
	sum - общая сумма заказа - вычисляется при создании записи
	date_order - дата создания заказа
	date_complete - дата завершения заказа
	proforma - номер документа - текст
	invoice - номер документа  - текст
	license - номер документа  - текст

ПРОТОКОЛ

добавить(изменить) разрешенный api_key 
если name  уже есть то в result: 'edit'
объект запроса
{
	admin_key:'74965',
	command:'new_api_key',
	data: {
		name: 'vasa',
		api_key: '5286',
		role: 'customer'
	}
}
объект ответа
{
	command:'new_api_key',	
	data: {
		name: 'vasa',
		role: 'customer',
		result: 'new', ('edit')
	}
}

удалить name 
если name  нет то в result: 'lack'
объект запроса
{
	admin_key:'74965',
	command:'dell_name',
	data: {
		name: 'vasa',
	}
}
объект ответа
{
	command:'dell_name',	
	data: {
		name: 'vasa',
		result: 'dell' ( 'lack')
	}
}

Создать заказ  доступна только  customer
если order_number уже есть - в result отправляем  double и ничего не меняем
объект запроса
{
	api_key:'2345678',
	command:'new_order',
	data: {
		inn: '',
		order_number:'',
		order:[{code:'',piece:'',price:''},{code:'',piece:'',price:''},{code:'',piece:'',price:''},],
		email:'',
		phone:'',
		address:'',
		device:''	
	}
}
объект ответа
{
	command:'new_order',	
	data: {
		order_number:'',
		result: 'new', ( double)
		id:'38'
	}
}
объект ошибки



получить информацию о заказе, доступна  customer и manager  ищем в таблице orders
объект запроса
{
	api_key:'2345678',
	command:'order_info',
	data: {
		id: '',   // смотри *
		order_number:''	 // смотри *
	}
} 
	//*  используем одно из полей, если заполнены оба, то ищем по id, если такого заказа нет, то ищем по order_number
объект ответа
{
	command:'order_info',	
	data: {
		id: '',
		order_number:'',
		inn: '',
		order_number:'',
		order:[{code:'',piece:'',price:''},{code:'',piece:'',price:''},{code:'',piece:'',price:''},],
		email:'',
		phone:'',
		address:'',
		device:'',
		sum:'',
		date_order:'',
		date_complete:'',
		proforma:'',
		invoice:'', 
		license:'' 
	}
}

Изменить статус заказа, доступна  только manager
объект запроса
{
	api_key:'2345678',
	command:'order_status_edit',
	data: {
		id: '',  // смотри *  
		order_number:''	 // смотри *  
		proforma:'',
		invoice:'', 
		license:'' 
	}
}
объект ответа
{
	command:'order_status_edit',	
	data: {
		order_number:'',
		id:'',
		result: 'edit'
	}
}

Завершить заказ , доступна  customer и manager
усли поле date_complete уже заполнено то в result отправляем double и ничего не меняем
объект запроса
{
	api_key:'2345678',
	command:'order_end',
	data: {
		id: '',  // смотри *  
		order_number:''	 // смотри *  
		date_complete:'',
	}
}
объект ответа
{
	command:'order_end',	
	data: {
		order_number:'',
		id:'',
		result: 'edit',  ( double)
	}
}



Получить список своих заказов за период (проверяем дату создания заказа), доступна  только customer
объект запроса
{
	api_key:'2345678',
	command:'order_list',
	data: {
		from: '',  //если параметр отсутствует, он не учитывается
		to:'',  //если параметр отсутствует, он не учитывается
		where:['proforma', 'invoice', 'license', 'date_complete'], //критерийотбора - если параметр указан - значит поле не пустое 
	}
}
объект ответа
{
	command:'order_list',	
	data: {
		order_list:[] // массив объектов заказов
	} 
}

Получить список всех заказов за период  (проверяем дату создания заказа), доступна только manager
объект запроса
{
	api_key:'2345678',
	command:'order_list_all',
	data: {
		from: '',  //если параметр отсутствует, он не учитывается
		to:'',	 //если параметр отсутствует, он не учитывается
		where:['proforma', 'invoice', 'license', 'date_complete'], //критерийотбора - если параметр указан - значит поле не пустое 
	}
}
объект ответа
{
	command:'order_list_all',	
	data: {
		order_list:[] // массив объектов заказов
	} 
}
//
объект заказа для order_list
	{
		id: '',
		order_number:'',
		inn: '',
		order_number:'',
		order:[{code:'',piece:'',price:''},{code:'',piece:'',price:''},{code:'',piece:'',price:''},],
		email:'',
		phone:'',
		address:'',
		device:'',
		sum:'',
		date_order:'',
		date_complete:'',
		proforma:'',
		invoice:'', 
		license:'' 
	}

Уведомление о получении нового заказа
отправляем GET запрос по <address> - указан прямо в скрипте, если поле пустое, то не отправляем
<address>?admin_key=4567&order=id // id из таблицы orders, если ответ не 200,  то фиксируем в логгер - если он включен


ВАЖНО!!!   customer и manager
customer   - всегда работает только со своими заказами
manager - доступны все заказы


admin_key - хранится прямо в коде сервера в виде объявления переменной
